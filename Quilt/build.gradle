buildscript {
    repositories {
    	maven { url  = 'https://plugins.gradle.org/m2/' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.0"
    }
}

plugins {
	id 'org.quiltmc.loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "2.+"
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import com.modrinth.minotaur.dependencies.ModDependency

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url 'https://maven.blamejared.com' }
	maven { url "https://cfa2.cursemaven.com" }
    maven { url "https://maven.cloudsmith.io/geckolib3/geckolib/" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://maven.shedaniel.me/" }
	maven { url = 'https://maven.parchmentmc.org' }
}

configurations {
    shade
}

dependencies {
    // Minecraft/Quilt deps
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings( loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-1.19.2:2022.08.14@zip")
	})
	modImplementation "org.quiltmc:quilt-loader:$loader_version"
	modImplementation "org.quiltmc:qsl:$qsl_version"
	modImplementation "org.quiltmc.quilted-fabric-api:quilted-fabric-api:$quilted_fapi_version"

    // Actual dependencies
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.0'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.0'
    implementation(include('com.eliotlash.mclib:mclib:19'))
    implementation project(':geckolib-core')

    // Shaded dependencies
    shade group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.0'
    shade group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.0'
    shade 'com.eliotlash.mclib:mclib:19'
    shade project(':geckolib-core')

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    test {
        useJUnitPlatform()
    }
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    modCompileOnly "vazkii.patchouli:Patchouli:1.19.2-76-FABRIC"
}

shadowJar {
    configurations = [project.configurations.shade]
    from sourceSets.main.output
    duplicatesStrategy = 'exclude'
    exclude('META-INF/services/**')
    exclude('it/**')
    exclude('com/google/**')
    relocate 'com.eliotlash', 'software.bernie.shadowed.eliotlash'
    relocate 'com.fasterxml', 'software.bernie.shadowed.fasterxml'
    classifier 'dev'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "GeckoLib",
                "Specification-Vendor"    : "Gecko",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.mod_version,
                "Implementation-Vendor"   : "Gecko",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources {
	inputs.property 'version', version
	inputs.property 'maven_group', maven_group
	inputs.property 'loader_version', loader_version
	inputs.property 'minecraft_version', minecraft_version

	filesMatching('quilt.mod.json') {
		expand([
			'version': version,
			'maven_group': maven_group,
			'loader_version': loader_version,
			'minecraft_version': minecraft_version,
			'quilted_fabric_api_version': quilted_fapi_version
		])
	}
}

loom {
	accessWidenerPath = file("src/main/resources/geckolib.aw")
}

tasks.withType(JavaCompile).configureEach {
	it.sourceCompatibility = 17 // for the IDE support
	it.options.encoding = 'UTF-8'
	it.options.release.set(17)
}

artifacts {
    archives shadowJar
}

java {
	withSourcesJar()
}

jar {
    from "LICENSE"
}

remapJar {
    dependsOn(shadowJar)
    inputFile = shadowJar.archiveFile
}

publishing {
    publications {
        mavenJava(MavenPublication) {
			from components.java
            artifactId = project.archives_base_name
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

publishing {
    repositories {
        maven {
	      name = "cloudsmith"
	      url = "https://maven.cloudsmith.io/geckolib3/geckolib/"
	      def releasesRepoUrl = "https://maven.cloudsmith.io/geckolib3/geckolib/"
	      def snapshotsRepoUrl = "https://maven.cloudsmith.io/geckolib3/geckolib/"
	      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
	      credentials {
                def envUsername = System.getenv("cloudUsername")
                def envPassword = System.getenv("cloudPassword")
                username = envUsername == null ? findProperty("cloudUsername") : envUsername
                password = envPassword == null ? findProperty("cloudPassword") : envPassword
	      }
	    }
    }
}

processResources {
	doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each { 
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

if (file('key.properties').exists()) {
    curseforge {

    def curseProp = new Properties()
    File secretPropsFile = file("key.properties")
    curseProp.load(secretPropsFile.newInputStream())

    project {
        apiKey = curseProp.getProperty('curseKey')
        id = "388172"
        releaseType = "release"
        changelogType = 'text'
        changelog = file('changelog.txt')
        addGameVersion("1.19.2")
        addGameVersion("Quilt")
        addGameVersion("Java 17")

        mainArtifact(remapJar)

        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }
    }
    options {
    	//debug = true
        forgeGradleIntegration = false
    }
   }
}

if (file('key.properties').exists()) {
	modrinth {
		def modrinthProp = new Properties()
		File secretPropsFile = file("key.properties")
		modrinthProp.load(secretPropsFile.newInputStream())
		
		token = modrinthProp.getProperty('modrinthKey')
		projectId = '8BmcQJ2H' 
		versionNumber = project.mod_version 
		versionName = 'Quilt 1.19.2'
		uploadFile = remapJar 
		changelog = rootProject.file("changelog.txt").text
		gameVersions = ['1.19.2']
		loaders = ['quilt']
		dependencies { 
        	required.project "qsl"
   		}
	}
}