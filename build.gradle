buildscript {
    repositories {
    	maven { url  = 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
    }
}

plugins {
    id 'fabric-loom' version '0.7-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
def snapshotVersion = System.getenv("GITHUB_RUN_NUMBER")
version = snapshotVersion == null ? project.mod_version : "SNAPSHOT-" + snapshotVersion
group = project.maven_group


minecraft {
}

repositories {
    mavenCentral()
    maven { url 'https://repo.repsy.io/mvn/fadookie/particleman' }
    maven { url 'https://maven.blamejared.com' }
	maven {
        url = "https://www.cursemaven.com"
    }
    maven {
    	url "https://maven.cloudsmith.io/geckolib3/geckolib/"
    }
    maven { url  = 'https://plugins.gradle.org/m2/' }
}

configurations {
    shade
}

dependencies {
    // Minecraft/Fabric deps
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modCompileOnly "vazkii.patchouli:Patchouli:1.16.4-48-FABRIC"	


    // Actual dependencies
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.0'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.0'
    implementation 'com.eliotlash.molang:molang:SNAPSHOT.12'
    implementation 'com.eliotlash.mclib:mclib:SNAPSHOT.12'
    implementation project(':geckolib-core')

    // Shaded dependencies
    shade group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.0'
    shade group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.0'
    shade 'com.eliotlash.molang:molang:SNAPSHOT.12'
    shade 'com.eliotlash.mclib:mclib:SNAPSHOT.12'
    shade project(':geckolib-core')

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

    test {
        useJUnitPlatform()
    }
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
}

shadowJar {
    configurations = [project.configurations.shade]
    from sourceSets.main.output
    duplicatesStrategy = 'exclude'
    relocate 'com.eliotlash', 'software.bernie.shadowed.eliotlash'
    relocate 'com.fasterxml', 'software.bernie.shadowed.fasterxml'
    classifier 'dev'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "GeckoLib",
                "Specification-Vendor"    : "Gecko",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.mod_version,
                "Implementation-Vendor"   : "Gecko",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}


// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		 it.options.release = targetVersion
	}
}

java {
	withSourcesJar()
}

artifacts {
    archives shadowJar
}

jar {
    from "LICENSE"
}

remapJar {
    dependsOn(shadowJar)
    input = shadowJar.archivePath
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(jar) {
                // Main dependency, in intermediary
                builtBy remapJar
            }
            artifact(shadowJar) {
                // Old dependency, only works with Yarn names
                classifier = 'dev'
            }
            artifact(sourcesJar) {
                // Sources, in intermediary
                builtBy remapSourcesJar
                classifier = 'sources'
            }
            artifactId = project.archives_base_name
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

publishing {
    repositories {
        maven {
	      name = "cloudsmith"
	      url = "https://maven.cloudsmith.io/geckolib3/geckolib/"
	      def releasesRepoUrl = "https://maven.cloudsmith.io/geckolib3/geckolib/"
	      def snapshotsRepoUrl = "https://maven.cloudsmith.io/geckolib3/geckolib/"
	      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
	      credentials {
                def envUsername = System.getenv("cloudUsername")
                def envPassword = System.getenv("cloudPassword")
                username = envUsername == null ? findProperty("cloudUsername") : envUsername
                password = envPassword == null ? findProperty("cloudPassword") : envPassword
	      }
	    }
    }
}

processResources {
	doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each { 
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

if (file('key.properties').exists()) {
    curseforge {

    def curseProp = new Properties()
    File secretPropsFile = file("key.properties")
    curseProp.load(secretPropsFile.newInputStream())

    project {
        apiKey = curseProp.getProperty('curseKey')
        id = "388172"
        releaseType = "release"
        changelogType = 'text'
        changelog = file('changelog.txt')
        addGameVersion("1.16.5")
        addGameVersion("Fabric")
        addGameVersion("Java 8")

        relations {
            requiredDependency 'fabric-api'      
        }
        mainArtifact(remapJar)

        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }
    }
    options {
    	//debug = true
        forgeGradleIntegration = false
    }
   }
}